{"version":3,"sources":["components/EventPin.jsx","components/Map.jsx","components/InformationOverlay.jsx","components/Alert.jsx","components/Dropdown.jsx","utils.js","components/Filters.jsx","components/Header.jsx","components/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["categoryIcon","wildfires","drought","dustHaze","earthquakes","floods","landslides","manmade","seaLakeIce","severeStorms","snow","tempExtremes","volcanoes","waterColor","categoryColor","EventPin","event","showEventInfo","className","onClick","icon","category","width","color","Map","initialLocation","events","style","height","bootstrapURLKeys","key","center","zoom","filter","ev","geometry","some","g","type","map","latestGeometry","sort","a","b","Date","date","newEvent","description","title","categories","id","lat","coordinates","lng","defaultProps","InformationOverlay","toLocaleDateString","Alert","alert","Dropdown","options","onChange","defaultOptionIndex","useState","open","setOpen","selectedOption","setSelectedOption","useEffect","length","JSON","stringify","reduce","max","curr","Math","Number","MIN_SAFE_INTEGER","tabIndex","onBlur","option","value","onSelectedOption","calculateDaysSince","now","diff","floor","getTime","timePeriods","days","Filters","setSelectedCategory","setSelectedTimePeriod","push","getFullYear","getMonth","addMonthAnYearToTimePeriodOptions","Header","href","Home","selectedEvent","setSelectedEvent","App","setEvents","setCategories","selectedCategory","selectedTimePeriod","setAlert","showAlert","message","setTimeout","url","axios","get","data","updateEvents","fetchCategories","timePeriod","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05475890.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport Icon from '@iconify/react';\nimport wildfires from '@iconify/icons-mdi/fire';\nimport severeStorms from '@iconify/icons-mdi/windsock';\nimport seaLakeIce from '@iconify/icons-mdi/snowflake';\nimport drought from '@iconify/icons-mdi/water-off';\nimport dustHaze from '@iconify/icons-mdi/google-podcast';\nimport earthquakes from '@iconify/icons-mdi/waveform'\nimport floods from '@iconify/icons-mdi/flood';\nimport landslides from '@iconify/icons-mdi/slope-downhill';\nimport manmade from '@iconify/icons-mdi/foot-print';\nimport snow from '@iconify/icons-mdi/weather-snowy';\nimport tempExtremes from '@iconify/icons-mdi/temperature-alert';\nimport volcanoes from '@iconify/icons-mdi/image-size-select-actual';\nimport waterColor from '@iconify/icons-mdi/waves';\n\nconst categoryIcon = {\n    wildfires,\n    drought,\n    dustHaze,\n    earthquakes,\n    floods,\n    landslides,\n    manmade,\n    seaLakeIce,\n    severeStorms,\n    snow,\n    tempExtremes,\n    volcanoes,\n    waterColor\n}\n\nconst categoryColor = {\n    wildfires: 'red',\n    drought: 'yellow',\n    dustHaze: 'brown',\n    earthquakes: 'black',\n    floods: 'blue',\n    landslides: 'brown',\n    manmade: 'grey',\n    seaLakeIce: 'blue',\n    severeStorms: 'grey',\n    snow: 'blue',\n    tempExtremes: 'red',\n    volcanoes: 'red',\n    waterColor: 'purple'\n}\n\nconst EventPin = ({ event, showEventInfo }) => <div className=\"pin\" onClick={() => showEventInfo(event)}>\n    <Icon icon={categoryIcon[event.category]} width=\"24px\" color={categoryColor[event.category]} />\n</div>;\n\nEventPin.propTypes = {\n    event: PropTypes.object.isRequired,\n    showEventInfo: PropTypes.func.isRequired,\n}\n\nexport default EventPin;","import React from \"react\";\nimport EventPin from \"./EventPin\";\nimport GoogleMap from \"google-map-react\";\nimport PropTypes from \"prop-types\";\n\nconst Map = ({initialLocation, events, showEventInfo}) => {\n  const renderEvents = () => {\n    return events\n      .filter((ev) => ev.geometry.some((g) => g.type === \"Point\"))\n      .map((event) => {\n        const latestGeometry = event.geometry.sort(\n          (a, b) => new Date(b.date) - new Date(a.date)\n        )[0];\n        const newEvent = {\n          date: latestGeometry.date,\n          description: event.description,\n          title: event.title,\n          category: event.categories[0].id,\n        };\n        return (\n          <EventPin\n            key={event.id}\n            lat={latestGeometry.coordinates[1]}\n            lng={latestGeometry.coordinates[0]}\n            event={newEvent}\n            showEventInfo={showEventInfo}\n          />\n        );\n      });\n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"90.7vh\" }}>\n      <GoogleMap\n        bootstrapURLKeys={{ key: \"AIzaSyDSghDK0XWTOPMyvT2rvgPWycmNjfcnN7Y\" }}\n        center={initialLocation}\n        zoom={4}\n      >\n        {renderEvents()}\n      </GoogleMap>\n    </div>\n  );\n};\n\nMap.propTypes = {\n  initialLocation: PropTypes.object,\n  events: PropTypes.array,\n  showEventInfo: PropTypes.func\n}\n\nMap.defaultProps = {\n  initialLocation: {\n    lat: 45.191613,\n    lng: -33.408711\n  }\n}\n\nexport default Map;\n","const InformationOverlay = ( { event: { title, description, date } }) => {\n    return <div className=\"card information-overlay\">\n        <h2>{title}</h2>\n        <p>{new Date(date).toLocaleDateString()}</p>\n        {description && <p>{description}</p>}\n    </div>\n}\nexport default InformationOverlay;","const Alert = ({ alert }) => (\n  <div className=\"alert\">\n    <div className=\"card\">{alert}</div>\n  </div>\n);\nexport default Alert;\n","import PropTypes from \"prop-types\";\nimport { useState, useEffect } from \"react\";\n\nconst Dropdown = ({ title, options, onChange, defaultOptionIndex }) => {\n  const [open, setOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(null);\n\n  useEffect(() => {\n    if (options.length > defaultOptionIndex) {\n      setSelectedOption(options[defaultOptionIndex]);\n    }\n  }, [JSON.stringify(options), options, defaultOptionIndex]);\n\n  const onSelectedOption = (option) => {\n    onChange(option);\n    setSelectedOption(option);\n    setOpen(false);\n  };\n\n  const width =\n    options.reduce(\n      (max, curr) => Math.max(max, curr.title.length),\n      Number.MIN_SAFE_INTEGER\n    ) *\n      9 +\n    30;\n\n  return (\n    <div\n      className={`dropdown${open ? \" open\" : \"\"}`}\n      style={{ width: `${width}px` }}\n      tabIndex=\"0\"\n      onBlur={() => setOpen(false)}\n    >\n      <div className=\"dropdown-header\" onClick={() => setOpen(!open)}>\n        <div className=\"dropdown-trigger\">\n          {selectedOption ? selectedOption.title : title}\n        </div>\n        <div className=\"dropdown-arrow\"></div>\n      </div>\n      {open && (\n        <ul>\n          {options.map((option) => (\n            <li\n              key={option.id}\n              value={option.id}\n              onClick={() => onSelectedOption(option)}\n            >\n              {option.title}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nDropdown.propTypes = {\n  title: PropTypes.string,\n  options: PropTypes.array,\n  onChange: PropTypes.func,\n};\n\nDropdown.defaultProps = {\n  title: \"Options\",\n  options: [],\n  onChange: null,\n  defaultOptionIndex: null,\n};\n\nexport default Dropdown;\n","const calculateDaysSince = (date) => {\n  const now = new Date();\n  const diff = Math.floor(date.getTime() - now.getTime());\n  const day = 1000 * 60 * 60 * 24;\n\n  return -Math.floor(diff / day);\n};\nexport { calculateDaysSince };\n","import { useEffect } from \"react\";\nimport Dropdown from \"./Dropdown\";\nimport { calculateDaysSince } from \"../utils\";\n\nconst timePeriods = [\n  { id: 1, title: \"Today\", days: 1 },\n  { id: 2, title: \"Last 7 days\", days: 7 },\n  { id: 3, title: \"Last 2 weeks\", days: 15 },\n];\n\nconst addMonthAnYearToTimePeriodOptions = () => {\n  const now = new Date();\n  timePeriods.push({\n    title: \"This month\",\n    days: calculateDaysSince(new Date(now.getFullYear(), now.getMonth(), 1)),\n    id: 4,\n  });\n  timePeriods.push({\n    title: \"This year\",\n    days: calculateDaysSince(new Date(now.getFullYear(), 0, 1)),\n    id: 5,\n  });\n};\n\nconst Filters = ({\n  categories,\n  setSelectedCategory,\n  setSelectedTimePeriod,\n}) => {\n  useEffect(() => {\n    addMonthAnYearToTimePeriodOptions();\n  }, []);\n\n  return (\n    <div className=\"filters\">\n      {categories && categories.length > 0 && (\n        <Dropdown\n          title={\"Category\"}\n          options={categories}\n          defaultOptionIndex={10}\n          onChange={setSelectedCategory}\n        />\n      )}\n      {timePeriods && timePeriods.length === 5 && (\n        <Dropdown\n          title={\"Time period\"}\n          options={timePeriods}\n          defaultOptionIndex={4}\n          onChange={setSelectedTimePeriod}\n        />\n      )}\n    </div>\n  );\n};\nexport default Filters;\n","import Filters from \"./Filters\";\n\nconst Header = ({ categories, setSelectedCategory, setSelectedTimePeriod }) => {\n  return (\n    <header>\n      <div>\n        <h1>NASA Events</h1>\n        <div className=\"desc\">Developed by <a href=\"https://eunice.dev\">Eunice Beijinho</a>, powered by NASA.</div>\n      </div>\n      <Filters\n        categories={categories}\n        setSelectedCategory={setSelectedCategory}\n        setSelectedTimePeriod={setSelectedTimePeriod}\n      />\n    </header>\n  );\n};\nexport default Header;\n","import Map from \"./Map\";\nimport InformationOverlay from \"./InformationOverlay\";\nimport PropTypes from \"prop-types\";\nimport Alert from \"./Alert\";\nimport { useState } from \"react\";\nimport Header from \"./Header\";\n\nconst Home = ({\n  categories,\n  events,\n  alert,\n  setSelectedCategory,\n  setSelectedTimePeriod,\n}) => {\n  const [selectedEvent, setSelectedEvent] = useState(null);\n\n  return (\n    <>\n      <Header categories={categories} setSelectedCategory={setSelectedCategory} setSelectedTimePeriod={setSelectedTimePeriod}/>\n      <Map events={events} showEventInfo={(event) => setSelectedEvent(event)} />\n      {selectedEvent && <InformationOverlay event={selectedEvent} />}\n      {alert && <Alert alert={alert} />}\n    </>\n  );\n};\n\nHome.propTypes = {\n  events: PropTypes.array,\n  categories: PropTypes.array,\n  setSelectedCategory: PropTypes.func,\n  setSelectedTimePeriod: PropTypes.func,\n  alert: PropTypes.string,\n};\n\nHome.defaultProps = {\n  events: [],\n  categories: [],\n  setSelectedCategory: null,\n  setSelectedTimePeriod: null,\n  alert: null,\n};\n\nexport default Home;\n","import Home from \"./components/Home\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { calculateDaysSince } from \"./utils\";\n\nconst App = () => {\n  const [events, setEvents] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState({\n    title: \"Volcanoes\",\n    id: \"volcanoes\",\n  });\n  const now = new Date();\n  const [selectedTimePeriod, setSelectedTimePeriod] = useState({\n    title: \"This year\",\n    days: calculateDaysSince(new Date(now.getFullYear(), 0, 1)),\n    id: 5,\n  });\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message) => {\n    setAlert(message);\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  useEffect(() => {\n    const updateEvents = async () => {\n      let url = selectedCategory\n        ? `https://eonet.sci.gsfc.nasa.gov/api/v3/categories/${selectedCategory.id}`\n        : \"https://eonet.sci.gsfc.nasa.gov/api/v3/events\";\n      url += selectedTimePeriod ? \"?days=\" + selectedTimePeriod.days : \"\";\n      const { data } = await axios.get(url);\n      setEvents(data.events);\n      if (data.events.length === 0) {\n        showAlert(\"We found no events. Try another category or time.\");\n      } else {\n        showAlert(`${data.events.length} events found.`);\n      }\n    };\n\n    updateEvents();\n  }, [selectedCategory, selectedTimePeriod]);\n\n  useEffect(() => {\n    const fetchCategories = async () => {\n      const { data } = await axios.get(\n        \"https://eonet.sci.gsfc.nasa.gov/api/v3/categories\"\n      );\n      setCategories(data.categories);\n    };\n\n    fetchCategories();\n  }, []);\n\n  return (\n    <Home\n      events={events}\n      categories={categories}\n      setSelectedCategory={(category) => setSelectedCategory(category)}\n      setSelectedTimePeriod={(timePeriod) => setSelectedTimePeriod(timePeriod)}\n      alert={alert}\n    />\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}