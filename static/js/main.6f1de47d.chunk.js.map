{"version":3,"sources":["components/EventPin.jsx","components/Map.jsx","components/InformationOverlay.jsx","components/Alert.jsx","components/Dropdown.jsx","utils.js","components/Filters.jsx","components/Header.jsx","components/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["categoryIcon","wildfires","drought","dustHaze","earthquakes","floods","landslides","manmade","seaLakeIce","severeStorms","snow","tempExtremes","volcanoes","waterColor","categoryColor","EventPin","event","showEventInfo","className","onClick","e","stopPropagation","icon","category","width","color","Map","events","resetEvent","useState","center","setCenter","mapEvents","setMapEvents","useEffect","cleanEvents","filter","ev","geometry","some","g","type","map","latestGeometry","sort","a","b","Date","date","id","description","title","link","sources","length","url","lat","coordinates","lng","categories","sumOfLatLon","reduce","result","curr","calculateCenter","mapHeight","document","getElementsByTagName","window","innerHeight","clientHeight","style","height","bootstrapURLKeys","key","v","zoom","options","fullscreenControl","restriction","latLngBounds","north","south","west","east","gestureHandling","InformationOverlay","toLocaleDateString","href","target","Alert","alert","Dropdown","onChange","defaultOptionIndex","open","setOpen","selectedOption","setSelectedOption","JSON","stringify","max","Math","Number","MIN_SAFE_INTEGER","tabIndex","onBlur","option","value","onSelectedOption","defaultProps","calculateDaysSince","now","diff","floor","getTime","timePeriods","days","Filters","setSelectedCategory","setSelectedTimePeriod","push","getFullYear","getMonth","addMonthAnYearToTimePeriodOptions","Header","Home","selectedEvent","setSelectedEvent","timePeriod","App","setEvents","setCategories","selectedCategory","selectedTimePeriod","setAlert","showAlert","message","setTimeout","axios","get","data","updateEvents","fetchCategories","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6f1de47d.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport Icon from \"@iconify/react\";\r\nimport wildfires from \"@iconify/icons-mdi/fire\";\r\nimport severeStorms from \"@iconify/icons-mdi/windsock\";\r\nimport seaLakeIce from \"@iconify/icons-mdi/snowflake\";\r\nimport drought from \"@iconify/icons-mdi/water-off\";\r\nimport dustHaze from \"@iconify/icons-mdi/google-podcast\";\r\nimport earthquakes from \"@iconify/icons-mdi/waveform\";\r\nimport floods from \"@iconify/icons-mdi/flood\";\r\nimport landslides from \"@iconify/icons-mdi/slope-downhill\";\r\nimport manmade from \"@iconify/icons-mdi/foot-print\";\r\nimport snow from \"@iconify/icons-mdi/weather-snowy\";\r\nimport tempExtremes from \"@iconify/icons-mdi/temperature-alert\";\r\nimport volcanoes from \"@iconify/icons-mdi/image-size-select-actual\";\r\nimport waterColor from \"@iconify/icons-mdi/waves\";\r\n\r\nconst categoryIcon = {\r\n  wildfires,\r\n  drought,\r\n  dustHaze,\r\n  earthquakes,\r\n  floods,\r\n  landslides,\r\n  manmade,\r\n  seaLakeIce,\r\n  severeStorms,\r\n  snow,\r\n  tempExtremes,\r\n  volcanoes,\r\n  waterColor,\r\n};\r\n\r\nconst categoryColor = {\r\n  wildfires: \"red\",\r\n  drought: \"yellow\",\r\n  dustHaze: \"brown\",\r\n  earthquakes: \"black\",\r\n  floods: \"blue\",\r\n  landslides: \"brown\",\r\n  manmade: \"black\",\r\n  seaLakeIce: \"blue\",\r\n  severeStorms: \"black\",\r\n  snow: \"blue\",\r\n  tempExtremes: \"red\",\r\n  volcanoes: \"red\",\r\n  waterColor: \"purple\",\r\n};\r\n\r\nconst EventPin = ({ event, showEventInfo }) => (\r\n  <div\r\n    className=\"pin\"\r\n    onClick={(e) => {\r\n      e.stopPropagation();\r\n      showEventInfo(event);\r\n    }}\r\n  >\r\n    <Icon\r\n      icon={categoryIcon[event.category]}\r\n      width=\"24px\"\r\n      color={categoryColor[event.category]}\r\n    />\r\n  </div>\r\n);\r\n\r\nEventPin.propTypes = {\r\n  event: PropTypes.object.isRequired,\r\n  showEventInfo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default EventPin;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport EventPin from \"./EventPin\";\r\nimport GoogleMap from \"google-map-react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst getCleanEvents = (dirtyEvents) => {\r\n  return dirtyEvents\r\n    .filter((ev) => ev.geometry.some((g) => g.type === \"Point\"))\r\n    .map((event) => {\r\n      const latestGeometry = event.geometry.sort(\r\n        (a, b) => new Date(b.date) - new Date(a.date)\r\n      )[0];\r\n\r\n      return {\r\n        id: event.id,\r\n        description: event.description,\r\n        title: event.title,\r\n        link:\r\n          event.sources && event.sources.length > 0\r\n            ? event.sources[0].url\r\n            : null,\r\n        lat: latestGeometry.coordinates[1],\r\n        lng: latestGeometry.coordinates[0],\r\n        date: latestGeometry.date,\r\n        category: event.categories[0].id,\r\n      };\r\n    });\r\n};\r\n\r\nconst calculateCenter = (events) => {\r\n  const sumOfLatLon = events.reduce(\r\n    (result, curr) => [result[0] + curr.lat, result[1] + curr.lng],\r\n    [0, 0]\r\n  );\r\n  return [sumOfLatLon[0] / events.length, sumOfLatLon[1] / events.length];\r\n};\r\n\r\nconst Map = ({ events, showEventInfo, resetEvent }) => {\r\n  const [center, setCenter] = useState([36.22592, -35.97138]);\r\n  const [mapEvents, setMapEvents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const cleanEvents = getCleanEvents(events);\r\n    setMapEvents(cleanEvents);\r\n\r\n    if (cleanEvents.length > 0) {\r\n      setCenter(calculateCenter(cleanEvents));\r\n    }\r\n  }, [events]);\r\n\r\n  const renderEvents = () => {\r\n    return mapEvents.map((event) => {\r\n      return (\r\n        <EventPin\r\n          key={event.id}\r\n          lat={event.lat}\r\n          lng={event.lng}\r\n          event={event}\r\n          showEventInfo={showEventInfo}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  let mapHeight = 0;\r\n  if (document.getElementsByTagName(\"header\").length > 0) {\r\n    mapHeight =\r\n      window.innerHeight -\r\n      document.getElementsByTagName(\"header\")[0].clientHeight +\r\n      \"px\";\r\n  }\r\n\r\n  return (\r\n    <div style={{ width: \"100vw\", height: mapHeight }}>\r\n      <GoogleMap\r\n        bootstrapURLKeys={{\r\n          key: \"AIzaSyCzWNIl6YwU2ibmZQonkytVOWzcIXxAxzA\",\r\n          v: \"3.43\",\r\n        }}\r\n        center={center}\r\n        onClick={() => resetEvent()}\r\n        zoom={3}\r\n        options={{\r\n          fullscreenControl: false,\r\n          restriction: {\r\n            latLngBounds: {\r\n              north: 85,\r\n              south: -85,\r\n              west: -180,\r\n              east: 180,\r\n            },\r\n          },\r\n          gestureHandling: \"greedy\",\r\n        }}\r\n      >\r\n        {renderEvents()}\r\n      </GoogleMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nMap.propTypes = {\r\n  events: PropTypes.array,\r\n  showEventInfo: PropTypes.func,\r\n  resetEvent: PropTypes.func,\r\n};\r\n\r\nexport default Map;\r\n","const InformationOverlay = ({ event: { title, description, date, link } }) => {\r\n  return (\r\n    <div className=\"card information-overlay\">\r\n      <h2>{title}</h2>\r\n      <p>{new Date(date).toLocaleDateString()}</p>\r\n      {description && <p>{description}</p>}\r\n      {link && (\r\n        <a href={link} target=\"_blank\">\r\n          See more information\r\n        </a>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default InformationOverlay;\r\n","const Alert = ({ alert }) => (\r\n  <div className=\"alert\">\r\n    <div className=\"card\">{alert}</div>\r\n  </div>\r\n);\r\nexport default Alert;\r\n","import PropTypes from \"prop-types\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst Dropdown = ({ title, options, onChange, defaultOptionIndex }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (options.length > defaultOptionIndex) {\r\n      setSelectedOption(options[defaultOptionIndex]);\r\n    }\r\n  }, [JSON.stringify(options), options, defaultOptionIndex]);\r\n\r\n  const onSelectedOption = (option) => {\r\n    onChange(option);\r\n    setSelectedOption(option);\r\n    setOpen(false);\r\n  };\r\n\r\n  const width =\r\n    options.reduce(\r\n      (max, curr) => Math.max(max, curr.title.length),\r\n      Number.MIN_SAFE_INTEGER\r\n    ) *\r\n      9 +\r\n    30;\r\n\r\n  return (\r\n    <div\r\n      className={`dropdown${open ? \" open\" : \"\"}`}\r\n      style={{ width: `${width}px` }}\r\n      tabIndex=\"0\"\r\n      onBlur={() => setOpen(false)}\r\n    >\r\n      <div className=\"dropdown-header\" onClick={() => setOpen(!open)}>\r\n        <div className=\"dropdown-trigger\">\r\n          {selectedOption ? selectedOption.title : title}\r\n        </div>\r\n        <div className=\"dropdown-arrow\"></div>\r\n      </div>\r\n      {open && (\r\n        <ul>\r\n          {options.map((option) => (\r\n            <li\r\n              key={option.id}\r\n              value={option.id}\r\n              onClick={() => onSelectedOption(option)}\r\n            >\r\n              {option.title}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nDropdown.propTypes = {\r\n  title: PropTypes.string,\r\n  options: PropTypes.array,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nDropdown.defaultProps = {\r\n  title: \"Options\",\r\n  options: [],\r\n  onChange: null,\r\n  defaultOptionIndex: null,\r\n};\r\n\r\nexport default Dropdown;\r\n","const calculateDaysSince = (date) => {\r\n  const now = new Date();\r\n  const diff = Math.floor(date.getTime() - now.getTime());\r\n  const day = 1000 * 60 * 60 * 24;\r\n\r\n  return -Math.floor(diff / day);\r\n};\r\nexport { calculateDaysSince };\r\n","import { useEffect } from \"react\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport { calculateDaysSince } from \"../utils\";\r\n\r\nconst timePeriods = [\r\n  { id: 1, title: \"Today\", days: 1 },\r\n  { id: 2, title: \"Last 7 days\", days: 7 },\r\n  { id: 3, title: \"Last 2 weeks\", days: 15 },\r\n];\r\n\r\nconst addMonthAnYearToTimePeriodOptions = () => {\r\n  const now = new Date();\r\n  timePeriods.push({\r\n    title: \"This month\",\r\n    days: calculateDaysSince(new Date(now.getFullYear(), now.getMonth(), 1)),\r\n    id: 4,\r\n  });\r\n  timePeriods.push({\r\n    title: \"This year\",\r\n    days: calculateDaysSince(new Date(now.getFullYear(), 0, 1)),\r\n    id: 5,\r\n  });\r\n};\r\n\r\nconst Filters = ({\r\n  categories,\r\n  setSelectedCategory,\r\n  setSelectedTimePeriod,\r\n}) => {\r\n  useEffect(() => {\r\n    addMonthAnYearToTimePeriodOptions();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"filters\">\r\n      {categories && categories.length > 0 && (\r\n        <Dropdown\r\n          title={\"Category\"}\r\n          options={categories}\r\n          defaultOptionIndex={10}\r\n          onChange={setSelectedCategory}\r\n        />\r\n      )}\r\n      {timePeriods && timePeriods.length === 5 && (\r\n        <Dropdown\r\n          title={\"Time period\"}\r\n          options={timePeriods}\r\n          defaultOptionIndex={4}\r\n          onChange={setSelectedTimePeriod}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Filters;\r\n","import Filters from \"./Filters\";\r\n\r\nconst Header = ({ categories, setSelectedCategory, setSelectedTimePeriod }) => {\r\n  return (\r\n    <header>\r\n      <div>\r\n        <h1>NASA Events</h1>\r\n        <div className=\"desc\">Developed by <a href=\"https://eunice.dev\">Eunice Beijinho</a>, powered by NASA.</div>\r\n      </div>\r\n      <Filters\r\n        categories={categories}\r\n        setSelectedCategory={setSelectedCategory}\r\n        setSelectedTimePeriod={setSelectedTimePeriod}\r\n      />\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import Map from \"./Map\";\r\nimport InformationOverlay from \"./InformationOverlay\";\r\nimport PropTypes from \"prop-types\";\r\nimport Alert from \"./Alert\";\r\nimport { useState } from \"react\";\r\nimport Header from \"./Header\";\r\n\r\nconst Home = ({\r\n  categories,\r\n  events,\r\n  alert,\r\n  setSelectedCategory,\r\n  setSelectedTimePeriod,\r\n}) => {\r\n  const [selectedEvent, setSelectedEvent] = useState(null);\r\n\r\n  const setCategory = (category) => {\r\n    setSelectedEvent(null);\r\n    setSelectedCategory(category);\r\n  }\r\n\r\n  const setTimePeriod = (timePeriod) => {\r\n    setSelectedEvent(null);\r\n    setSelectedTimePeriod(timePeriod);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header categories={categories} setSelectedCategory={setCategory} setSelectedTimePeriod={setTimePeriod}/>\r\n      <Map events={events} showEventInfo={(event) => setSelectedEvent(event)} resetEvent={() => setSelectedEvent(null)} />\r\n      {selectedEvent && <InformationOverlay event={selectedEvent} />}\r\n      {alert && <Alert alert={alert} />}\r\n    </>\r\n  );\r\n};\r\n\r\nHome.propTypes = {\r\n  events: PropTypes.array,\r\n  categories: PropTypes.array,\r\n  setSelectedCategory: PropTypes.func,\r\n  setSelectedTimePeriod: PropTypes.func,\r\n  alert: PropTypes.string,\r\n};\r\n\r\nHome.defaultProps = {\r\n  events: [],\r\n  categories: [],\r\n  setSelectedCategory: null,\r\n  setSelectedTimePeriod: null,\r\n  alert: null,\r\n};\r\n\r\nexport default Home;\r\n","import Home from \"./components/Home\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { calculateDaysSince } from \"./utils\";\r\n\r\n\r\n    // TODO Show a loading icon after selecting a category\r\nconst App = () => {\r\n  const [events, setEvents] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState({\r\n    title: \"Volcanoes\",\r\n    id: \"volcanoes\",\r\n  });\r\n  const now = new Date();\r\n  const [selectedTimePeriod, setSelectedTimePeriod] = useState({\r\n    title: \"This year\",\r\n    days: calculateDaysSince(new Date(now.getFullYear(), 0, 1)),\r\n    id: 5,\r\n  });\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message) => {\r\n    setAlert(message);\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 2000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const updateEvents = async () => {\r\n      let url = selectedCategory\r\n        ? `https://eonet.gsfc.nasa.gov/api/v3/categories/${selectedCategory.id}`\r\n        : \"https://eonet.gsfc.nasa.gov/api/v3/events\";\r\n      url += selectedTimePeriod ? \"?days=\" + selectedTimePeriod.days : \"\";\r\n      const { data } = await axios.get(url);\r\n      setEvents(data.events);\r\n      if (data.events.length === 0) {\r\n        showAlert(\"We found no events. Try another category or time.\");\r\n      } else {\r\n        showAlert(`${data.events.length} events found.`);\r\n      }\r\n    };\r\n\r\n    updateEvents();\r\n  }, [selectedCategory, selectedTimePeriod]);\r\n\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      const { data } = await axios.get(\r\n        \"https://eonet.gsfc.nasa.gov/api/v3/categories\"\r\n      );\r\n      setCategories(data.categories);\r\n    };\r\n\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  return (\r\n    <Home\r\n      events={events}\r\n      categories={categories}\r\n      setSelectedCategory={(category) => setSelectedCategory(category)}\r\n      setSelectedTimePeriod={(timePeriod) => setSelectedTimePeriod(timePeriod)}\r\n      alert={alert}\r\n    />\r\n  );\r\n};\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}